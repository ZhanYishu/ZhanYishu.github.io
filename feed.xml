<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://zhanyishu.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zhanyishu.github.io/" rel="alternate" type="text/html" /><updated>2018-07-22T18:14:40+08:00</updated><id>https://zhanyishu.github.io/</id><title type="html">My personal blog - ZhanYishu</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><author><name>詹一树</name></author><entry><title type="html">NodeJS模块加载机制</title><link href="https://zhanyishu.github.io/NodeJS%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/" rel="alternate" type="text/html" title="NodeJS模块加载机制" /><published>2018-07-22T00:00:00+08:00</published><updated>2018-07-22T00:00:00+08:00</updated><id>https://zhanyishu.github.io/NodeJS%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6</id><content type="html" xml:base="https://zhanyishu.github.io/NodeJS%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/">&lt;p&gt;讲NodeJS模块的加载机制前，我们先来讲讲js模块化。&lt;/p&gt;

&lt;p&gt;js与生俱来便缺少模块化的东西，以至于前辈们在构建网站时很是头疼，自己构建时，往往要自己区分作用域，使用闭包或者对象管理各个模块；引入第三方模块时没有通用的模块化规范，只能手动嵌入&lt;script&gt;&lt;/script&gt;，并且要管理好前后的依赖；捂心心疼一秒……&lt;/p&gt;

&lt;p&gt;所以促进js模块化与模块化统一规范发展迫在眉睫。2009年NodeJS的出现，这标志”Javascript模块化编程”正式诞生。NodeJS的模块化就是参照CommonJS规范实现的，CommonJS规范主要用在服务端。比较出名用在浏览器端的AMD规范。ES6在CommonJS基础上则推出静态化的模块化机制，使之编译时就能确定模块之间的依赖关系。&lt;/p&gt;

&lt;p&gt;好的，规范出来了，那么支持这些规范的工具也随着而来了，在NodeJS环境支持下，webpack模块化打包工具乘势席卷了前端圈。好的，接下来回到主角，NodeJS模块加载机制&lt;/p&gt;

&lt;h4 id=&quot;一贴出commonjs的模块规范&quot;&gt;一、贴出CommonJS的模块规范&lt;/h4&gt;

&lt;p&gt;1、模块引用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const element = require('element-ui')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2、导出模块定义&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 导出默认模块
module.exports = 'element-ui'
// 导出具名模块
exports.ElInput = 'el-input'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3、模块标识&lt;/p&gt;

&lt;p&gt;可以是符合小驼峰命名的字符串或者是相对路径与绝对路径&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在CommonJS模块中，有三个变量，module（代表模块本身)，exports(导出对象)，require（引入模块方法）&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;二nodejs的模块加载机制&quot;&gt;二、NodeJS的模块加载机制&lt;/h4&gt;
&lt;p&gt;在node中引入模块需要经历三个步骤：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;路径分析&lt;/li&gt;
  &lt;li&gt;文件定位&lt;/li&gt;
  &lt;li&gt;编译执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在node中，模块分为两类：核心模块和文件模块，核心模块在node启动时就被写入内存中，省去了文件定位和编译执行&lt;/p&gt;
&lt;h5 id=&quot;1-优先从缓存加载&quot;&gt;1、 优先从缓存加载&lt;/h5&gt;
&lt;p&gt;也就是用require（）加载过的，会缓存，下次优先从缓存加载，这也是为什么我们使用webpack构建项目时，为什么第一次构建的时间会慢于第二次构建的原因&lt;/p&gt;
&lt;h5 id=&quot;2路径分析和文件定位&quot;&gt;2、路径分析和文件定位&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;路径形式文件模块，require（路径），指明了文件的具体位置，能够节约大量的时间&lt;/li&gt;
  &lt;li&gt;自定义模块，require（名字），这类模块查找最费时，它的查找策略是沿着当前node_modules目录逐层往上寻找，直到根目录下的node_modules，文件的路径越深查找越费时，加载越慢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查找到文件的路径，剩下文件的定位，require()在分析标识符的过程中可以不包含扩展名，node会按照.js、.json、.node的次序依次寻找&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以为了加快加载速度，建议大家都使用路径定位文件且加上扩展名，减少node的加载时间&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;3模块编译&quot;&gt;3、模块编译&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;.js文件。通过fs模块同步读取文件后编译执行&lt;/li&gt;
  &lt;li&gt;.node文件。通过dlopen()方法加载最后编译生成的文件&lt;/li&gt;
  &lt;li&gt;.json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回的结果&lt;/li&gt;
  &lt;li&gt;其余。全被当做.js文件载入，项目构建中require()后怎么识别，这就轮到webpack上手了&lt;/li&gt;
&lt;/ul&gt;</content><author><name>詹志方</name></author><category term="NODE" /><summary type="html">讲NodeJS模块的加载机制前，我们先来讲讲js模块化。</summary></entry><entry><title type="html">CommonsChunkPlugin VS SplitChunksPlugin</title><link href="https://zhanyishu.github.io/CommonsChunkPlugin-VS-SplitChunksPlugin/" rel="alternate" type="text/html" title="CommonsChunkPlugin VS SplitChunksPlugin" /><published>2018-07-22T00:00:00+08:00</published><updated>2018-07-22T00:00:00+08:00</updated><id>https://zhanyishu.github.io/CommonsChunkPlugin%20VS%20SplitChunksPlugin</id><content type="html" xml:base="https://zhanyishu.github.io/CommonsChunkPlugin-VS-SplitChunksPlugin/">&lt;p&gt;等了好久终于等到你，
webpack团队人员卧薪尝胆五个多月的时间终于带来的webpack4.0，个人觉得webpack4带来的最大优化便是对于懒加载块拆分的优化，删除了CommonsChunkPlugin，新增了优化后的SplitChunksPlugin，那么CommonsChunkPlugin的痛点在哪？SplitChunksPlugin的优化又是在哪？&lt;/p&gt;
&lt;h4 id=&quot;1commonschunkplugin的痛&quot;&gt;1、CommonsChunkPlugin的痛&lt;/h4&gt;
&lt;p&gt;记得17年始，我刚开始用webpack搭建一个vue的单页应用框架时，我陆续的抛出了几个问题：&lt;/p&gt;

&lt;p&gt;1、如何避免单页应用首次的入口文件过大？&lt;/p&gt;

&lt;p&gt;这个问题处理起来倒简单，webpack支持import()语法实现模块的懒加载，可以做到随用随载，也就是除了首页要用到文件，其他模块使用懒加载就能有效的避免入口文件过大&lt;/p&gt;

&lt;p&gt;2、入口模块以及剩下的懒加载模块引用公用的模块时，代码会重复吗？webpack会处理吗？怎么处理？&lt;/p&gt;

&lt;p&gt;代码重复是肯定的，如果父级模块中没有引入懒加载模块的共用模块，那么懒加载各模块间就会出现代码重复；webpack能处理，那么怎么处理呢？这时CommonsChunkPlugin就信誓旦旦地登场了，它能够将全部的懒加载模块引入的共用模块统一抽取出来，形成一个新的common块，这样就避免了懒加载模块间的代码重复了，哇！好强大，点个赞。可惜的是，又回到了第一个问题，你把共用的东西都抽出来了，这样又造成了入口文件过大了。以下是CommonsChunkPlugin时代常用的配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new webpack.optimize.CommonsChunkPlugin({
  name: 'vendor',
  // 引入node_modules的依赖全抽出来
  minChunks: function (module, count) {
    // any required modules inside node_modules are extracted to vendor
    return (
      module.resource &amp;amp;&amp;amp;
      /\.js$/.test(module.resource) &amp;amp;&amp;amp;
      module.resource.indexOf(
        path.join(__dirname, '../node_modules')
      ) === 0
    )
  }
  // 或者直接minChunks: 2，重复模块大于2的全部抽出来
}),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;总之你在代码重复与入口文件控制方面你得做个平衡，而这个平衡挺不利于多人开发的，也不易于优化，我刚接触时有写了一篇博文也是关于&lt;a href=&quot;https://www.cnblogs.com/zhanyishu/p/6587571.html&quot;&gt;懒加载&lt;/a&gt;，这里对于项目平衡与取舍有做了一些分析，这里就不再展开。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CommonsChunkPlugin的痛，痛在只能统一抽取模块到父模块，造成父模块过大，不易于优化&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;2splitchunksplugin的好&quot;&gt;2、SplitChunksPlugin的好&lt;/h4&gt;
&lt;p&gt;前面讲了那么多，其实SplitChunksPlugin的登场就是为了抹平之前CommonsChunkPlugin的痛的，它能够抽出懒加载模块之间的公共模块，并且不会抽到父级，而是会与首次用到的懒加载模块并行加载，这样我们就可以放心的使用懒加载模块了，以下是官网说明的一些例子：&lt;/p&gt;

&lt;p&gt;假设存在以下chunk-a~chunk-d&lt;/p&gt;

&lt;p&gt;==chunk-a==: react, react-dom, some components&lt;/p&gt;

&lt;p&gt;==chunk-b==: react, react-dom, some other components&lt;/p&gt;

&lt;p&gt;==chunk-c==: angular, some components&lt;/p&gt;

&lt;p&gt;==chunk-d==: angular, some other components&lt;/p&gt;

&lt;p&gt;webpack会自动创建两个chunk模块，结果如下：&lt;/p&gt;

&lt;p&gt;==chunk-a~chunk-b==: react, react-dom&lt;/p&gt;

&lt;p&gt;==chunk-c~chunk-d==: angular&lt;/p&gt;

&lt;p&gt;==chunk-a== to ==chunk-d==: Only the components&lt;/p&gt;

&lt;p&gt;SplitChunksPlugin使用官网默认配置基本可以满足大多数单页应用了，以下是我对于多页应用补充的配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;optimization: {
    splitChunks: {
      // 抽离入口文件公共模块为commmons模块
      cacheGroups: {
        commons: {
          name: &quot;commons&quot;,
          chunks: &quot;initial&quot;,
          minChunks: 2
        }
      }
    }
  },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ZhanYishu/vue-cli&quot;&gt;vue-cli&lt;/a&gt;这是我升级到webpack4.0后的vue-cli配置，结合了happypack，vue-loader@16，单页与多页自动构建等的脚手架&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SplitChunksPlugin的好，好在解决了入口文件过大的问题还能有效自动化的解决懒加载模块之间的代码重复问题&lt;/strong&gt;&lt;/p&gt;</content><author><name>詹志方</name></author><category term="webpack" /><summary type="html">等了好久终于等到你， webpack团队人员卧薪尝胆五个多月的时间终于带来的webpack4.0，个人觉得webpack4带来的最大优化便是对于懒加载块拆分的优化，删除了CommonsChunkPlugin，新增了优化后的SplitChunksPlugin，那么CommonsChunkPlugin的痛点在哪？SplitChunksPlugin的优化又是在哪？ 1、CommonsChunkPlugin的痛 记得17年始，我刚开始用webpack搭建一个vue的单页应用框架时，我陆续的抛出了几个问题：</summary></entry><entry><title type="html">从vue内联处理器看本质</title><link href="https://zhanyishu.github.io/%E4%BB%8Evue%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E7%9C%8B%E6%9C%AC%E8%B4%A8/" rel="alternate" type="text/html" title="从vue内联处理器看本质" /><published>2018-07-18T00:00:00+08:00</published><updated>2018-07-18T00:00:00+08:00</updated><id>https://zhanyishu.github.io/%E4%BB%8Evue%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E7%9C%8B%E6%9C%AC%E8%B4%A8</id><content type="html" xml:base="https://zhanyishu.github.io/%E4%BB%8Evue%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E7%9C%8B%E6%9C%AC%E8%B4%A8/">&lt;h3 id=&quot;一vue内联处理器有哪些类型&quot;&gt;一、vue内联处理器有哪些类型&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;h3&amp;gt;1、简单函数&amp;lt;/h3&amp;gt;
  &amp;lt;el-button @click=handleClick&amp;gt;点击我&amp;lt;/el-button&amp;gt;
  &amp;lt;h3&amp;gt;2、立即执行函数，且带作用域&amp;lt;/h3&amp;gt;
  &amp;lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot;&amp;gt;
    &amp;lt;el-option
      v-for=&quot;item in options&quot;
      :key=&quot;item.value&quot;
      :label=&quot;item.label&quot;
      :value=&quot;item.value&quot;
      @click=&quot;handleClick(item)&quot;
    &amp;gt;&amp;lt;/el-option&amp;gt;
  &amp;lt;/el-select&amp;gt;
  &amp;lt;h3&amp;gt;3、立即执行函数，带内部抛出数据&amp;lt;/h3&amp;gt;
  &amp;lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot;&amp;gt;
    &amp;lt;el-option
      v-for=&quot;item in options&quot;
      :key=&quot;item.value&quot;
      :label=&quot;item.label&quot;
      :value=&quot;item.value&quot;
      @click.native=&quot;handleClick($event)&quot;
    &amp;gt;&amp;lt;/el-option&amp;gt;
  &amp;lt;/el-select&amp;gt;
  &amp;lt;h3&amp;gt;4、立即执行函数，且内部抛出单个数据与携带作用域&amp;lt;/h3&amp;gt;
  &amp;lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot;&amp;gt;
    &amp;lt;el-option
      v-for=&quot;item in options&quot;
      :key=&quot;item.value&quot;
      :label=&quot;item.label&quot;
      :value=&quot;item.value&quot;
      @click=&quot;handleClick($event, item)&quot;
    &amp;gt;&amp;lt;/el-option&amp;gt;
  &amp;lt;/el-select&amp;gt;
  &amp;lt;h3&amp;gt;5、立即执行函数，内部要抛出多个数据且携带作用域&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;event-component v-for=&quot;item in options&quot; @click=&quot;handleClick(arguments, item)&quot;&amp;gt;&amp;lt;/event-component&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
	components: {
      EventComponent: {
      	template: `&amp;lt;li @click=&quot;handleClick&quot;&amp;gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/li&amp;gt;`,
        methods: {
          handleClick (ev) {
          	this.$emit('click', ev, 'eventComponent')
          }
        }
      }
    },
    data() {
      return {
        options: [{
          value: '选项1',
          label: '黄金糕'
        }, {
          value: '选项2',
          label: '双皮奶'
        }, {
          value: '选项3',
          label: '蚵仔煎'
        }, {
          value: '选项4',
          label: '龙须面'
        }, {
          value: '选项5',
          label: '北京烤鸭'
        }],
        value: ''
      }
    },
    methods: {
      handleClick (ev, scope) {
      	console.log(ev, scope)
      	// 1、event, undefined
      	// 2、item, undefined
      	// 3、event, undefined
      	// 4、event, item
      	// 5、arguments（'1': event, '2': 'eventComponent'）,item
      }
    }
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;二事件类型&quot;&gt;二、事件类型&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;简单函数&lt;/li&gt;
  &lt;li&gt;立即执行函数
    &lt;ul&gt;
      &lt;li&gt;不带实参立即执行函数&lt;/li&gt;
      &lt;li&gt;带作用域立即执行函数&lt;/li&gt;
      &lt;li&gt;带自定义事件抛出的单个数据&lt;/li&gt;
      &lt;li&gt;带自定义事件抛出的单个数据与携带作用域&lt;/li&gt;
      &lt;li&gt;带自定义事件抛出的多个数据与携带作用域
        &lt;h4 id=&quot;问题&quot;&gt;问题&lt;/h4&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;为什么立即执行函数不立即执行？&lt;/li&gt;
  &lt;li&gt;为什么非要用$event才能带出自定义事件抛出的单个或者多个数据？&lt;/li&gt;
  &lt;li&gt;如果自定义事件要抛出多个数据时怎么接收？
    &lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=&amp;gt;|^function\s*\(/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\[&quot;[^&quot;]*?&quot;]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;
function genHandler(name, handler) {
  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  // 如果匹配到方法路径或者是纯方法则返回对应方法
  if (isMethodPath || isFunctionExpression) {
    return handler.value
  }
  // 如果是立即执行函数则返回用以下包裹的方法，这就是为什么立即执行函数不执行的原因
  /* istanbul ignore if */
  return (&quot;function($event){&quot; + (handler.value) + &quot;}&quot;) /
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如vue源码，vue模板编译器对模板进行了处理，如果匹配到模板中绑定的方法为方法路径或者为函数则直接返回对应的函数，当触发事件的时候直接执行对应函数；如果匹配到是立即执行函数则对立即执行函数外面包装一层函数，形参为$event，这也是为什么我们能用$event接收自定义事件抛出的数据的原因，如果我们想获取到全部自定义事件抛出的参数就只能用arguments了&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;立即执行函数不立即执行，vue对模板进行一层函数封装&lt;/li&gt;
  &lt;li&gt;$event并非总是事件对象，只有在原生dom上绑定事件时才是事件对象，$event其实只是函数调用的第一个实参&lt;/li&gt;
  &lt;li&gt;自定义事件需要接受多个参数且包含作用域时，需要用arguments接收&lt;/li&gt;
  &lt;li&gt;写组件时自定义事件$emit触发事件的时候尽量使用一个对象抛出，避免使用多个数据抛出&lt;/li&gt;
&lt;/ul&gt;</content><author><name>詹志方</name></author><category term="VUE" /><summary type="html">一、vue内联处理器有哪些类型</summary></entry><entry><title type="html">npm简单理解</title><link href="https://zhanyishu.github.io/npm%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/" rel="alternate" type="text/html" title="npm简单理解" /><published>2018-06-12T00:00:00+08:00</published><updated>2018-06-12T00:00:00+08:00</updated><id>https://zhanyishu.github.io/npm%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3</id><content type="html" xml:base="https://zhanyishu.github.io/npm%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/">&lt;h4 id=&quot;一安装本地包&quot;&gt;一、安装本地包&lt;/h4&gt;

&lt;p&gt;1、创建 config 包:
新增 config 文件夹; 重命名 config.js 为 config/index.js 文件; 创建 package.json 定义 config 包&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;name&quot;: &quot;config&quot;,
    &quot;main&quot;: &quot;index.js&quot;,
    &quot;version&quot;: &quot;0.1.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2、在应用层 package.json 文件中新增依赖项，然后执行 npm install; 或直接执行第 3 步&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;dependencies&quot;: {
        &quot;config&quot;: &quot;file:./config&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3、（等价于第 2 步）直接在应用目录执行 npm install file:./config
此时，查看 node_modules 目录我们会发现多出来一个名为 config，指向上层 config/ 文件夹的软链接。这是因为 npm 识别 file: 协议的url，得知这个包需要直接从文件系统中获取，会自动创建软链接到 node_modules 中，完成“安装”过程。&lt;/p&gt;
&lt;h4 id=&quot;二私有-git-共享-package&quot;&gt;二、私有 git 共享 package&lt;/h4&gt;
&lt;p&gt;有些时候，我们一个团队内会有一些代码/公用库需要在团队内不同项目间共享，但可能由于包含了敏感内容，或者代码太烂拿不出手等原因，不方便发布到源。
这种情况下，我们可以简单地将被依赖的包托管在私有的 git 仓库中，然后将该  git url 保存到 dependencies 中. npm 会直接调用系统的 git 命令从 git 仓库拉取包的内容到 node_modules 中。
npm 支持的 git url 格式:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;protocol&amp;gt;://[&amp;lt;user&amp;gt;[:&amp;lt;password&amp;gt;]@]&amp;lt;hostname&amp;gt;[:&amp;lt;port&amp;gt;][:][/]&amp;lt;path&amp;gt;[#&amp;lt;commit-ish&amp;gt; | #semver:&amp;lt;semver&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;三依赖包版本管理&quot;&gt;三、依赖包版本管理&lt;/h4&gt;
&lt;p&gt;npm 依赖管理的一个重要特性是采用了语义化版本 (semver) 规范，作为依赖版本管理方案。
semver 约定一个包的版本号必须包含3个数字，格式必须为 MAJOR.MINOR.PATCH, 意为 主版本号.小版本号.修订版本号.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MAJOR 对应大的版本号迭代，做了不兼容旧版的修改时要更新 MAJOR 版本号&lt;/li&gt;
  &lt;li&gt;MINOR 对应小版本迭代，发生兼容旧版API的修改或功能更新时，更新MINOR版本号&lt;/li&gt;
  &lt;li&gt;PATCH 对应修订版本号，一般针对修复 BUG 的版本号&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1、^2.2.1
指定的 MAJOR 版本号下, 所有更新的版本
匹配 2.2.3, 2.3.0; 不匹配 1.0.3, 3.0.1&lt;/p&gt;

&lt;p&gt;2、~2.2.1
指定 MAJOR.MINOR 版本号下，所有更新的版本
匹配 2.2.3, 2.2.9 ; 不匹配 2.3.0, 2.4.5&lt;/p&gt;

&lt;p&gt;3、&amp;gt;=2.1
版本号大于或等于 2.1.0
匹配 2.1.2, 3.1&lt;/p&gt;

&lt;p&gt;4、&amp;lt;=2.2
版本号小于或等于 2.2
匹配 1.0.0, 2.2.1, 2.2.11&lt;/p&gt;

&lt;p&gt;5、1.0.0 - 2.0.0
版本号从 1.0.0 (含) 到 2.0.0 (含)
匹配 1.0.0, 1.3.4, 2.0.0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从npm5之后新增了package-lock 文件，能够避免开发者npm install出现不同版本及package依赖关系不一致的情况&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;四npm-scripts&quot;&gt;四、npm scripts&lt;/h4&gt;
&lt;h5 id=&quot;1-基本使用&quot;&gt;1、 基本使用&lt;/h5&gt;
&lt;p&gt;npm scripts 是 npm 另一个很重要的特性。通过在 package.json 中 scripts 字段定义一个脚本，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;scripts&quot;: {
        &quot;echo&quot;: &quot;echo HELLO WORLD&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我们就可以通过 npm run echo 命令来执行这段脚本，像在 shell 中执行该命令 echo HELLO WORLD 一样，看到终端输出 HELLO WORLD&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;npm run 命令执行时，会把 ./node_modules/.bin/ 目录添加到执行环境的 PATH 变量中，因此如果某个命令行包未全局安装，而只安装在了当前项目的 node_modules 中，通过 npm run 一样可以调用该命令。&lt;/li&gt;
  &lt;li&gt;执行 npm 脚本时要传入参数，需要在命令后加 – 标明, 如 npm run test – –grep=”pattern” 可以将 –grep=”pattern” 参数传给 test 命令&lt;/li&gt;
  &lt;li&gt;npm 提供了 pre 和 post 两种钩子机制，可以定义某个脚本前后的执行脚本&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运行时变量：在 npm run 的脚本执行环境内，可以通过环境变量的方式获取许多运行时相关信息，以下都可以通过 process.env 对象访问获得：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;npm_lifecycle_event - 正在运行的脚本名称&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;npm_package_&lt;key&gt; - 获取当前包 package.json 中某个字段的配置值：如 npm_package_name 获取包名&lt;/key&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;npm_package_&lt;key&gt;_&lt;sub-key&gt; - package.json 中嵌套字段属性：如 npm_pacakge_dependencies_webpack 可以获取到 package.json 中的 dependencies.webpack 字段的值，即 webpack 的版本号
&lt;/sub-key&gt;&lt;/key&gt;        &lt;h5 id=&quot;2node_modulesbin目录&quot;&gt;2、node_modules/.bin目录&lt;/h5&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;整个package包可供调用的命令集合&lt;/li&gt;
  &lt;li&gt;package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;bin&quot;: {
        &quot;webpack&quot;: &quot;./bin/webpack.js&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样在命令行执行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node ./node_modules/.bin/webpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;就会自动执行对应package包下./bin/webpack.js脚本
如果全局安装了package包，则执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;webpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;跟上面的结果一样&lt;/p&gt;
&lt;h5 id=&quot;3npx&quot;&gt;3、npx&lt;/h5&gt;
&lt;p&gt;npx 的使用很简单，就是执行 npx &lt;command /&gt; 即可，这里的 &lt;command /&gt; 默认就是 ./node_modules 目录中安装的可执行脚本名。例如上面本地安装好的 webpack 包，我们可以直接使用 npx webpack 执行即可。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可以一键执行远程npm源的二进制包&lt;/li&gt;
  &lt;li&gt;可以使用不同版本的node执行命令&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx node@4 -e &quot;console.log(process.version)&quot;
npx node@6 -e &quot;console.log(process.version)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;五npm-配置&quot;&gt;五、npm 配置&lt;/h4&gt;
&lt;h5 id=&quot;1基本配置&quot;&gt;1、基本配置&lt;/h5&gt;
&lt;p&gt;npm cli 提供了 npm config 命令进行 npm 相关配置，通过 npm config ls -l 可查看 npm 的所有配置，包括默认配置。npm 文档页为每个配置项提供了详细的说明 https://docs.npmjs.com/misc/config&lt;/p&gt;

&lt;p&gt;修改配置的命令为 npm config set &lt;key&gt; &lt;value&gt;, 我们使用相关的常见重要配置:&lt;/value&gt;&lt;/key&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;proxy, https-proxy: 指定 npm 使用的代理&lt;/li&gt;
  &lt;li&gt;registry 指定 npm 下载安装包时的源，默认为 https://registry.npmjs.org/ 可以指定为私有 Registry 源&lt;/li&gt;
  &lt;li&gt;package-lock 指定是否默认生成 package-lock 文件，建议保持默认 true&lt;/li&gt;
  &lt;li&gt;save true/false 指定是否在 npm install 后保存包为 dependencies, npm 5 起默认为 true
    &lt;h5 id=&quot;2工程配置&quot;&gt;2、工程配置&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;除了使用 CLI 的 npm config 命令显示更改 npm 配置，还可以通过 npmrc 文件直接修改配置。&lt;/li&gt;
  &lt;li&gt;这样的 npmrc 文件优先级由高到低包括：&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;工程内配置文件: /path/to/my/project/.npmrc&lt;/li&gt;
  &lt;li&gt;用户级配置文件: ~/.npmrc&lt;/li&gt;
  &lt;li&gt;全局配置文件: $PREFIX/etc/npmrc (即npm config get globalconfig 输出的路径)&lt;/li&gt;
  &lt;li&gt;npm内置配置文件: /path/to/npm/npmrc
    &lt;h4 id=&quot;六node版本约束&quot;&gt;六、node版本约束&lt;/h4&gt;
    &lt;p&gt;虽然一个项目的团队都共享了相同的代码，但每个人的开发机器可能安装了不同的 node 版本，此外服务器端的也可能与本地开发机不一致。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;engines&quot;: { &quot;node&quot;: &quot;&amp;gt;=7.6.0&quot;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>詹志方</name></author><category term="NODE" /><summary type="html">一、安装本地包</summary></entry><entry><title type="html">任务队列之vue-nextTick</title><link href="https://zhanyishu.github.io/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B9%8Bvue-nextTick/" rel="alternate" type="text/html" title="任务队列之vue-nextTick" /><published>2018-03-28T00:00:00+08:00</published><updated>2018-03-28T00:00:00+08:00</updated><id>https://zhanyishu.github.io/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B9%8Bvue-nextTick</id><content type="html" xml:base="https://zhanyishu.github.io/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B9%8Bvue-nextTick/">&lt;h4 id=&quot;1vue官网对于nexttick的解释vue-在内部尝试对异步队列使用原生的-promisethen-和-messagechannel如果执行环境不支持会采用-settimeoutfn-0-代替&quot;&gt;1、Vue官网对于nextTick的解释（Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替）&lt;/h4&gt;
&lt;h4 id=&quot;2异步队列分为两种&quot;&gt;2、异步队列分为两种&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;macro-queue宏任务队列&quot;&gt;macro queue（宏任务队列）&lt;/h5&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;h6 id=&quot;setimmediatefunc-param1-param2--只有ie浏览器支持并且版本在ie10以上&quot;&gt;setImmediate(func, [param1, param2, …]) (只有IE浏览器支持，并且版本在IE10以上)&lt;/h6&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;h6 id=&quot;messagechannelvue源码中通过通道1和通道2进行通信&quot;&gt;MessageChannel(vue源码中通过通道1和通道2进行通信)&lt;/h6&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;
  macroTimerFunc = function () {
    port.postMessage(1);
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;h6 id=&quot;settimeoutfunc-0在前两种方法都不支持的情况下使用settimeout&quot;&gt;setTimeout(func, 0)在前两种方法都不支持的情况下使用setTimeout&lt;/h6&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;micro-queue-微任务队列&quot;&gt;micro queue (微任务队列)&lt;/h5&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;h6 id=&quot;promiseresolvethenfunc&quot;&gt;Promise.resolve().then(func)&lt;/h6&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：微任务队列的执行会在宏任务队列前执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function nextTick (cb, ctx) {
  var _resolve;
  // 回调方法数组
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  // 同一个主程序中只开启一个异步队列
  if (!pending) {
    pending = true;
    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  }
  // $flow-disable-line
  if (!cb &amp;amp;&amp;amp; typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>詹志方</name></author><category term="VUE" /><summary type="html">1、Vue官网对于nextTick的解释（Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替） 2、异步队列分为两种 macro queue（宏任务队列） setImmediate(func, [param1, param2, …]) (只有IE浏览器支持，并且版本在IE10以上) MessageChannel(vue源码中通过通道1和通道2进行通信) var channel = new MessageChannel(); var port = channel.port2; channel.port1.onmessage = flushCallbacks; macroTimerFunc = function () { port.postMessage(1); }; setTimeout(func, 0)在前两种方法都不支持的情况下使用setTimeout</summary></entry><entry><title type="html">对象缓存</title><link href="https://zhanyishu.github.io/%E5%AF%B9%E8%B1%A1%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0/" rel="alternate" type="text/html" title="对象缓存" /><published>2017-06-15T00:00:00+08:00</published><updated>2017-06-15T00:00:00+08:00</updated><id>https://zhanyishu.github.io/%E5%AF%B9%E8%B1%A1%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0</id><content type="html" xml:base="https://zhanyishu.github.io/%E5%AF%B9%E8%B1%A1%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0/">&lt;h2 id=&quot;一解决问题&quot;&gt;一、解决问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;避免重复运算&lt;/li&gt;
  &lt;li&gt;避免重复创建对象&lt;/li&gt;
  &lt;li&gt;优化代码计算量与运行性能&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;二具体实现方式&quot;&gt;二、具体实现方式&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function toCache(fn) {
    let cache = {};
    return function() {
        //将实参转换为字符串的形式，将其用作cache的key
        let key = arguments.length + Array.prototype.join.call(arguments, ',');
        if (key in cache) return cache[key];
        return cache[key] = fn.apply(this, argunments);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;三具体实例&quot;&gt;三、具体实例&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;创建对象实例&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function factory(opt) {
    return new NewObj(opt);
}

function NewObj(opt) {
    this.init(opt)
}

NewObj.prototype.init = function(opt) {
    Object.assign(this.opt, opt)
}

//缓存factory与cache
let mekeObj = toCache(factory);
//第一次创建对象
makeObj({a: 1, b: 2, c: 3});
//第二次创建对象
makeObj({a: 1, b: 2, c: 3})；
//当再次调用创建对象方法makeObj({a: 1, b: 2, c: 3})时，将会从cache中直接拿刚才创建好的对象
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;计算缓存&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function sum(a, b, c) {
    return a + b + c;
}

let cacheSum = toCache(sum);

//首次计算
cacheSum(1, 2, 3);

//再次计算,将会从cache中直接拿cache['1,2,3']，避免再次计算;
cacheSum(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>詹志方</name></author><category term="JS" /><summary type="html">一、解决问题 避免重复运算 避免重复创建对象 优化代码计算量与运行性能</summary></entry><entry><title type="html">分时函数</title><link href="https://zhanyishu.github.io/%E5%88%86%E6%97%B6%E5%87%BD%E6%95%B0/" rel="alternate" type="text/html" title="分时函数" /><published>2017-05-08T00:00:00+08:00</published><updated>2017-05-08T00:00:00+08:00</updated><id>https://zhanyishu.github.io/%E5%88%86%E6%97%B6%E5%87%BD%E6%95%B0</id><content type="html" xml:base="https://zhanyishu.github.io/%E5%88%86%E6%97%B6%E5%87%BD%E6%95%B0/">&lt;h4 id=&quot;分时函数用于解决首次加载或渲染过多资源造成浏览器卡顿的现象可以有效解决浏览器性能问题&quot;&gt;分时函数用于解决首次加载或渲染过多资源造成浏览器卡顿的现象，可以有效解决浏览器性能问题&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function timeChunk(arr, count, fn, interval = 200) {
    let newArr = [];
    let time = 0;
    let timer = null;
    const start = function() {
        newArr = arr.splice(0, count);
        fn(count);
    }
    
    return function() {
        timer = setInterval(function(){
            time = interval;
            if (arr.length === 0) return clearInterval(timer);
            start();
        }, time)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;参数arr：要加载的全部资源&lt;/li&gt;
  &lt;li&gt;count：一次加载资源的个数&lt;/li&gt;
  &lt;li&gt;fn：加载资源方法&lt;/li&gt;
  &lt;li&gt;interval：加载资源间隔时间&lt;/li&gt;
&lt;/ul&gt;</content><author><name>詹志方</name></author><category term="JS" /><summary type="html">分时函数用于解决首次加载或渲染过多资源造成浏览器卡顿的现象，可以有效解决浏览器性能问题</summary></entry><entry><title type="html">面向切面编程</title><link href="https://zhanyishu.github.io/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B-AOP/" rel="alternate" type="text/html" title="面向切面编程" /><published>2017-04-25T00:00:00+08:00</published><updated>2017-04-25T00:00:00+08:00</updated><id>https://zhanyishu.github.io/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B(AOP)</id><content type="html" xml:base="https://zhanyishu.github.io/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B-AOP/">&lt;p&gt;——旨在将与业务逻辑无关的模块抽离出来，动态注入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Function.prototype.before = function(beforeFn) {
    const _self = this;
    // func1
    return function() {
        beforeFn.apply(_self, arguments);
        return _self.apply(this, arguments);
    }
}

Function.prototype.after = function(afterFn) {
    const _self = this;
    // func2
    return function() {
        const ret = _self.apply(this, arguments); // 执行func1
        afterFn.apply(this, arguments);
        return ret; // 返回原函数的返回值
    }
}

let func = function() {
    console.log(2)
    return 4;
}

func = func.before(function() {
    console.log(1);
}).after(function() {
    console.log(3);
})

console.log(func()/*执行func2*/); // 输出1,2,3,4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;可在函数func执行前后动态注入与业务逻辑无关模块&quot;&gt;可在函数func执行前后动态注入与业务逻辑无关模块&lt;/h5&gt;</content><author><name>詹志方</name></author><category term="JS" /><summary type="html">——旨在将与业务逻辑无关的模块抽离出来，动态注入</summary></entry><entry><title type="html">惰性加载函数</title><link href="https://zhanyishu.github.io/%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/" rel="alternate" type="text/html" title="惰性加载函数" /><published>2017-04-03T00:00:00+08:00</published><updated>2017-04-03T00:00:00+08:00</updated><id>https://zhanyishu.github.io/%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0</id><content type="html" xml:base="https://zhanyishu.github.io/%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/">&lt;p&gt;——在处理浏览器的兼容性中，常用的是进行条件判断，然后选用兼容的方法，这样做会让每次调用该方法时都执行了条件判断，浏览器的环境是固定不变的，造成不必要的性能消耗，这时可以采用惰性加载函数解决&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addEvent(el, event, fn) {
    if (window.addEventListener) {
        addEvent = function(el, event, fn) {
            el.addEventListener(event, fn, false);
        }
    } else {
        addEvent = function(el, event, fn) {
            el.attachEvent('on' + event, fn);
        }
    }
    addEvent(el, event, fn);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>詹志方</name></author><category term="JS" /><summary type="html">——在处理浏览器的兼容性中，常用的是进行条件判断，然后选用兼容的方法，这样做会让每次调用该方法时都执行了条件判断，浏览器的环境是固定不变的，造成不必要的性能消耗，这时可以采用惰性加载函数解决</summary></entry><entry><title type="html">柯里化函数</title><link href="https://zhanyishu.github.io/%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0/" rel="alternate" type="text/html" title="柯里化函数" /><published>2017-03-12T00:00:00+08:00</published><updated>2017-03-12T00:00:00+08:00</updated><id>https://zhanyishu.github.io/%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0</id><content type="html" xml:base="https://zhanyishu.github.io/%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0/">&lt;p&gt;——旨在先保存数据，避免不必要的计算，最后才计算&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const currying = function(fn) {
    let arr = [];
    return function() {
        if (arguments.length === 0) {
            return fn.apply(this, arr);
        } else {
            [].push.apply(arr, arguments);
            return arguments.callee;
        }
    }
}

const cost = (function() {
    let money = 0;
    return function() {
        for (let item of Array.from(arguments)) {
            money += item;
        }
        return money;
    }
})()

let toCost = currying(cost);
toCost(100);
toCost(200);
toCost(300);
console.log(toCost()); // 600
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>詹志方</name></author><category term="JS" /><summary type="html">——旨在先保存数据，避免不必要的计算，最后才计算</summary></entry></feed>